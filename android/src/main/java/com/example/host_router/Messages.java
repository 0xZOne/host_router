// Autogenerated from Pigeon (v0.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon


import java.util.HashMap;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.StandardMessageCodec;

/** Generated class from Pigeon. */
public class Messages {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PushRoute {
    private String name;
    public String getName() { return name; }
    public void setName(String setterArg) { this.name = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<String, Object>();
      toMapResult.put("name", name);
      return toMapResult;
    }
    static PushRoute fromMap(HashMap map) {
      PushRoute fromMapResult = new PushRoute();
      fromMapResult.name = (String)map.get("name");
      return fromMapResult;
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface HostRouterApi {
    void pushRoute(PushRoute arg);

    /** Sets up an instance of `HostRouterApi` to handle messages through the `binaryMessenger` */
    public static void setup(BinaryMessenger binaryMessenger, HostRouterApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<Object>(binaryMessenger, "dev.flutter.pigeon.HostRouterApi.pushRoute", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler(new BasicMessageChannel.MessageHandler<Object>() {
            public void onMessage(Object message, BasicMessageChannel.Reply<Object> reply) {
              PushRoute input = PushRoute.fromMap((HashMap)message);
              HashMap<String, HashMap> wrapped = new HashMap<String, HashMap>();
              try {
                api.pushRoute(input);
                wrapped.put("result", null);
              }
              catch (Exception exception) {
                wrapped.put("error", wrapError(exception));
              }
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static HashMap wrapError(Exception exception) {
    HashMap<String, Object> errorMap = new HashMap<String, Object>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", null);
    errorMap.put("details", null);
    return errorMap;
  }
}
